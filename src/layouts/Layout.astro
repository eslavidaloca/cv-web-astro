---
import "@radix-ui/themes/styles.css";
import "@styles/base/base.css";
import "@styles/animations/photo-spin.scss";
import "animate.css";
// import ThemeProvider from '@/theme/ThemeProvider.tsx';

import Navbar from "@/components/en/Navbar";
import NavbarTranslate from "@/components/NavbarTranslate.tsx";

import { cn } from "@/lib/utils";

import Head from "@/components/en/Head.astro";
import Header from "@/components/en/layout/Header.astro";
import Sonner from "@/components/en/Sonner.tsx";
import Modal from "@/components/Modal";
import ThemeToggle from "@/components/ThemeToggle";
import { Toaster } from "@/components/ui/sonner";

import Analytics from "@vercel/analytics/astro";
import { Icon } from "astro-icon/components";

// This is in case some page need to have an additional class applied to the layout
type Props = {
	className?: string;
};
import { isDarkMode } from "@/nanostores";


const { className } = Astro.props;

const currentPath = Astro.url.pathname.replace(/^\/(en|es)\//, '/');
const lang = Astro.currentLocale || 'en';
---
<!doctype html>
<html lang={lang}>
	<head>
		<Head />
	</head>
	<body class={isDarkMode ? "dark" : "light"}>
		<Header>
			<Navbar slot="mid-header" client:load>
				<Icon name="mdi:chart-timeline-variant-shimmer" slot="iconTimeline" class="size-[120px] text-white" />
				<Icon name="mdi:server-security" slot="iconBack" class="size-[120px] text-olive-900 dark:text-white mx-auto" />
				<Icon name="mdi:monitor-shimmer" slot="iconFront" class="size-[120px] text-white mx-auto" />
			</Navbar>
			<div class="flex items-center gap-x-2 2xl:gap-x-6 lg:gap-x-4 md:gap-x-4" slot="right-header">
				<NavbarTranslate lang={lang} currentPath={currentPath} client:load>
					<Icon slot="iconLang" name="mdi:language" class="size-[22px] mr-1" />
					<Icon slot="iconUsa" name="flag-us" class="size-[25px] m-0" />
					<Icon slot="iconMx" name="flag-mx" class="size-[25px] m-0" />
				</NavbarTranslate>
				<a
				href="https://github.com/eslavidaloca"
				target="_blank"
				rel="noreferrer"
				aria-label="eslavi's github"
				class="triggerBtn transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground rounded-md p-2"
				>
				<Icon name="github" class="size-[22px]" />   <!-- TODO: this size is what is causing that popup when refreshing the page -->
				</a>
				
				<a
				href="https://www.linkedin.com/in/eslavi/"
				target="_blank"
				rel="noreferrer"
				aria-label="eslavi's linkedin"
				class="triggerBtn transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground rounded-md p-2"
				>
				<Icon name="linkedin" class="size-[22px] stroke-0" />
				</a>
				<Modal ariaLabel="eslavi's whatsapp button" title="Proceed to whatsapp?" description="This action will take you to whatsapp so you can chat with me directly." href="https://wa.me/523334436842" client:load>
					<Icon slot="icon" name="mdi:whatsapp" class="size-[22px] stroke-0" />
				</Modal>
				<Sonner client:only="react">
					<Icon slot="iconBtn" name="mdi:email-outline" class="size-[22px] stroke-0" />
				</Sonner>
				
				<ThemeToggle client:only="react"/>
			</div>
		</Header>
		<!-- <ThemeProvider client:load> -->
		<div class="ball" transition:persist></div>
		<main class={cn(
			"flex flex-col p-4 items-center justify-center",
			className
			)}
			role="main"
		>
			<slot />
		</main>
		<!-- </ThemeProvider> -->
		<Analytics />
		
		<Toaster client:idle/> 
	</body>
</html>

<script>
	import { animate, frame } from "motion"

	const balls = document.querySelectorAll('div.ball');

	balls.forEach((ball) => {
		const ballElement = ball as HTMLElement;

		ballElement.style.position = "fixed";

		const rect = ball.getBoundingClientRect();
		
		// This was changed bc scrolling or resizing the window bugged the ball position
		const ballWidth  = rect.left + ballElement.offsetWidth  / 2;
		const ballHeight = rect.top  + ballElement.offsetHeight / 2;

		let pointerX = 0;
		let pointerY = 0;

		function springToPointer() {
			animate(
			ball,
			{
				x: pointerX - ballWidth,
				y: pointerY - ballHeight,
			},
			{ type: "spring", stiffness: 100, damping: 10 }
			);
		}

		document.addEventListener("pointermove", (e) => {
			pointerX = e.clientX;
			pointerY = e.clientY;

			frame.postRender(springToPointer);
		});

		document.addEventListener("pointerout", () => {
			pointerX = 0;
			pointerY = 0;

			frame.postRender(springToPointer);
		});
	});

	import { isDarkMode } from "@/nanostores.ts";

	const html = document.querySelector("html");

	const body = document.querySelector("body");
	// This changes the theme for Code components
	isDarkMode.subscribe(isDark => {
		if (isDark === "dark") {
			// body?.classList.add("dark");
			html?.setAttribute("data-theme", "rose-pine");
		} else {
			// body?.classList.remove("dark");
			html?.setAttribute("data-theme", "rose-pine-dawn");
		}
	});
</script>